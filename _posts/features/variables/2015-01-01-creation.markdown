---
layout: post
title:  "Create and update variables"
categories: variables
---

There is two ways to create variables, `:=` and `:`.

The most common way is by the use of `:=` which creates a new variable and sets the value. `:` on the other hand only creates a variable, but then you need to specify the variable type.

## Examples

{% highlight go %}
// foo is initialized with the value "bar" of type String
foo := "bar"

IO::Println(foo) // "bar"
{% endhighlight %}

{% highlight go %}
// foo is initialized with the default value of the String-type
// which is an empty string ("")
foo : String

IO::Println(foo) // ""

// foo can later be updated as usual
foo = "bar"

IO::Println(foo) // "bar"
{% endhighlight %}

## Creation

A variable can only be created once within the same scope, creating it again is an error and the program will exit.

{% highlight go %}
// Invalid
foo := "bar"
foo := "baz"
{% endhighlight %}

Instead, if you need to update a variable, use the `=`-operator.

{% highlight go %}
// Valid
foo := "bar"
foo = "baz"
{% endhighlight %}

## Type

As seen above, the type can eiter be explicetly set with the `var : Type`-syntax. But it will also implicitly be set wit the initialization of any other value as well.

This means that `var := "foo"` will set `var` to the type of `String`. The type of a variable can never change, and thus code such as the following is illegal.

{% highlight go %}
foo := "bar"
foo = 1234 // Can not set variable of type String to Number
{% endhighlight %}
